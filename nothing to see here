import random as rnd

def selection_sort(lst: list) -> list:
    """
    Sorts the a list in a rising order
    :param lst: an unordered list consisting of numbers (int)
    :return list
    """
    ret_lst = []
    for i in range(0, len(lst)):
        index_value = lst[0]
        for n in range(0, len(lst)):
            if lst[n] < index_value:
                index_value = lst[n]
        lst.remove(index_value)
        ret_lst.append(index_value)
    return ret_lst
        
def ordered_list(starting_value: int, length: int) -> list:
    """
    Creates am ordered list with a given length, beginning at a given value
    :param starting_value: first (smallest) number in the list
    :param length: How many elements there are in the list
    :return list
    """
    lst = []
    for i in range(starting_value, starting_value + length):
        lst.append(i)
    return lst


def mix(lst: list) -> list:
    """
    Takes a list and rearranges the elements in a random order
    USES AND AUXILIARY ARRAY
    :param lst: any list with any elements, only one Dimension will be shuffled
    :return: list
    """
    ret_lst = []
    for i in range(0, len(lst)):
        ret_lst.append(lst.pop(rnd.randint(0, len(lst) - 1)))

    return ret_lst

list_ = ordered_list(1, 10)
list_ = mix(list_)
print(list_)
list_ = selection_sort(list_)
print(list_)


"""-----------------------------------------------------------------------------------------------------------_"""
import random as rnd

def selection_sort(lst: list) -> list:
    """
    Sorts the a list in a rising order
    :param list_: an unordered list consisting of numbers (int)
    :return list
    """
    list_ = lst
    ret_list_ = []
    for i in range(0, len(list_)):
        index_value = list_[0]
        for n in range(0, len(list_)):
            if list_[n] < index_value:
                index_value = list_[n]
        list_.remove(index_value)
        ret_list_.append(index_value)
    return ret_list_

def selection_improved(lst: list[int]) -> list[int]:
    list_ = lst
     for i in range(0, len(list_)):
         for n in range(0, i):
             if list_[i]
             
             
             

def ordered_list(starting_value: int, length: int) -> list:
    """
    Creates am ordered list with a given length, beginning at a given value
    :param starting_value: first (smallest) number in the list
    :param length: How many elements there are in the list
    :return list
    """
    list_ = []
    for i in range(starting_value, starting_value + length):
        list_.append(i)
    return list_


def mix(list_: list) -> list:
    """
    Takes a list and rearranges the elements in a random order
    USES AND AUXILIARY ARRAY
    :param list_: any list with any elements, only one Dimension will be shuffled
    :return: list
    """
    ret_list_ = []
    for i in range(0, len(list_)):
        ret_list_.append(list_.pop(rnd.randint(0, len(list_) - 1)))

    return ret_list_

def insertion_sort(lst: list) -> list:
    list_ = lst
    for i in range(0, len(list_)):
        item = list_[i]
        for j in range(0, i):
            if item < list_[j]:
                list_.remove(item)
                list_ = list_[:j] + [item] + list_[j:]
                break
    return list_

def bubble_sort(lst: list) -> list:
    list_ = lst
    swapped = True
    while swapped:
        swapped = False
        for i in range(1, len(list_)):
            if list_[i-1] > list_[i]:
                swapped = True               
                list_[i-1], list_[i] = list_[i], list_[i-1]
                    
    return list_
                
    
    
                
        
                   

list_ = ordered_list(1, 10)
list_ = mix(list_)
print(list_)
list_ = bubble_sort(list_)
print(list_)





------------------------------------------------------------------------------------------------------------

import random as rnd

def selection_sort(lst: list) -> list:
    """
    Sorts the a list in a rising order
    :param list_: an unordered list consisting of numbers (int)
    :return list
    """
    list_ = lst
    ret_list_ = []
    for i in range(0, len(list_)):
        index_value = list_[0]
        for n in range(0, len(list_)):
            if list_[n] < index_value:
                index_value = list_[n]
        list_.remove(index_value)
        ret_list_.append(index_value)
    return ret_list_

def selection_improved(lst: list[int]) -> list[int]:
    list_ = lst
    for i in range(0, len(list_)):
        for n in range(0, i):
            if list_[i]:
                pass
             
             
             

def ordered_list(starting_value: int, length: int) -> list:
    """
    Creates am ordered list with a given length, beginning at a given value
    :param starting_value: first (smallest) number in the list
    :param length: How many elements there are in the list
    :return list
    """
    list_ = []
    for i in range(starting_value, starting_value + length):
        list_.append(i)
    return list_


def mix(list_: list) -> list:
    """
    Takes a list and rearranges the elements in a random order
    USES AND AUXILIARY ARRAY
    :param list_: any list with any elements, only one Dimension will be shuffled
    :return: list
    """
    ret_list_ = []
    for i in range(0, len(list_)):
        ret_list_.append(list_.pop(rnd.randint(0, len(list_) - 1)))

    return ret_list_

def insertion_sort(lst: list) -> list:
    list_ = lst
    for i in range(0, len(list_)):
        item = list_[i]
        for j in range(0, i):
            if item < list_[j]:
                list_.remove(item)
                list_ = list_[:j] + [item] + list_[j:]
                break
    return list_

def bubble_sort(lst: list) -> list:
    list_ = lst
    swapped = True
    while swapped:
        swapped = False
        for i in range(1, len(list_)):
            if list_[i-1] > list_[i]:
                swapped = True               
                list_[i-1], list_[i] = list_[i], list_[i-1]
                    
    return list_

list_ = ordered_list(1, 10)
list_ = mix(list_)
print(list_)
list_ = insertion_sort(list_)
print(list_)






















                
"""
def quick_sort(lst: list) -> list:
    if len(lst) == 1:
        return lst
    else:
        slice_1 = quick_sort(lst[:len(lst/2)])
        slice_2 = quick_sort(lst[len(lst/2):])
        total = []
        for i in range(0, slice_1*2):
            if slice_1[0] < slice_2[0]:
                total.append(slice_1.pop(0))
            else:
                total.append(slice_2.pop(0))
        
        return total
 """   
    
                
        
        

---------------------------------------




import random as rnd
import time as time
import sys as sys

sys.setrecursionlimit(10_000)

def quick_sort(lst: list) -> list:
    """
    Quick sort algorithm; recursive
    :param lst: list consisting of any numbers
    :return: list
    """
    if len(lst) <= 1:
        return lst
    else:
        return_list = []
        slice_a = quick_sort(lst[:int(len(lst)/2)])
        slice_b = quick_sort(lst[int(len(lst)/2):])

        while len(slice_a) > 0 and len(slice_b) > 0:
            if slice_a[0] < slice_b[0]:
                return_list.append(slice_a.pop(0))
            else:
                return_list.append(slice_b.pop(0))

        if len(slice_a) == 0:
            return_list = return_list + slice_b
        else:
            return_list = return_list + slice_a
        return return_list

def test(lst):
    if len(lst) > 0:
    #zerlegen
        pivot = lst[0]
        smaller_than_pivot = []
        bigger_than_pivot = []
        for i in range(1, len(lst)):
            if lst[i] < pivot:
                smaller_than_pivot.append(lst[i])
            else:
                bigger_than_pivot.append(lst[i])
        smaller_than_pivot_sorted = test(smaller_than_pivot)
        bigger_than_pivot_sorted = test(bigger_than_pivot)
        lst_sorted = smaller_than_pivot_sorted + [pivot] + bigger_than_pivot_sorted
    else:
        
        lst_sorted = lst
    
    return lst_sorted
        
        
        
def ordered_list(starting_value: int, length: int) -> list:
    """
    Creates am ordered list with a given length, beginning at a given value
    :param starting_value: first (smallest) number in the list
    :param length: How many elements there are in the list
    :return list
    """
    lst = []
    for i in range(starting_value, starting_value + length):
        lst.append(i)
    return lst    


def shuffle(lst: list) -> list:
    """
    Takes a list and shuffles the item in a random order
    :param lst: any list with any elements, only one Dimension will be shuffled
    :return: list
    """
    for i in range(1, len(lst)):
        index_element = rnd.randint(0, len(lst) - i)
        lst = lst[:index_element] + lst[index_element+1:] + [lst[index_element]]
    return lst

list_ = ordered_list(1, 50_000)
list_.pop()
#print(list_)
list_1 = list_
list_2 = list_
print("sort start")
start_time = time.time()
test(list_1)
print("schule", time.time() - start_time)
start_time = time.time()
quick_sort(list_2)
print("ich", time.time() - start_time)




